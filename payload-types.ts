/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    exercises: Exercise;
    workouts: Workout;
    recipes: Recipe;
    mealPlans: MealPlan;
    userProfiles: UserProfile;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    exercises: ExercisesSelect<false> | ExercisesSelect<true>;
    workouts: WorkoutsSelect<false> | WorkoutsSelect<true>;
    recipes: RecipesSelect<false> | RecipesSelect<true>;
    mealPlans: MealPlansSelect<false> | MealPlansSelect<true>;
    userProfiles: UserProfilesSelect<false> | UserProfilesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  authJSId?: string | null;
  roles: 'user' | 'admin';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exercises".
 */
export interface Exercise {
  id: string;
  name: string;
  /**
   * Sets for this exercise
   */
  sets: {
    reps?: number | null;
    weight?: number | null;
    id?: string | null;
  }[];
  description?: string | null;
  instructions?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  muscleGroups?: ('chest' | 'back' | 'shoulders' | 'arms' | 'legs' | 'core' | 'fullBody')[] | null;
  difficulty?: ('beginner' | 'intermediate' | 'advanced') | null;
  equipment?: ('none' | 'dumbbells' | 'barbell' | 'kettlebell' | 'resistanceBands' | 'machine' | 'bodyweight')[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workouts".
 */
export interface Workout {
  id: string;
  name: string;
  date: string;
  /**
   * Add exercises to this workout
   */
  exercises?: (string | null) | Exercise;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes".
 */
export interface Recipe {
  id: string;
  name: string;
  description: string;
  category: 'breakfast' | 'lunch' | 'dinner' | 'snack' | 'preWorkout' | 'postWorkout' | 'dessert';
  dietaryPreferences?:
    | ('vegetarian' | 'vegan' | 'glutenFree' | 'dairyFree' | 'keto' | 'paleo' | 'lowCarb' | 'highProtein')[]
    | null;
  /**
   * Preparation time in minutes
   */
  prepTime: number;
  /**
   * Cooking time in minutes
   */
  cookTime: number;
  servings: number;
  ingredients: {
    ingredient: string;
    quantity: string;
    unit: string;
    id?: string | null;
  }[];
  instructions: {
    step: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    id?: string | null;
  }[];
  nutritionalInfo: {
    calories: number;
    /**
     * Protein in grams
     */
    protein: number;
    /**
     * Carbohydrates in grams
     */
    carbs: number;
    /**
     * Fat in grams
     */
    fat: number;
    /**
     * Fiber in grams
     */
    fiber?: number | null;
    /**
     * Sugar in grams
     */
    sugar?: number | null;
  };
  images?:
    | {
        image: string | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  tips?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  createdBy?: (string | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mealPlans".
 */
export interface MealPlan {
  id: string;
  name: string;
  description: string;
  goal: 'weightLoss' | 'muscleGain' | 'maintenance' | 'performance' | 'generalHealth';
  /**
   * Duration of the meal plan in days
   */
  duration: number;
  /**
   * Target daily calories for this meal plan
   */
  dailyCalories?: number | null;
  /**
   * Macronutrient distribution (should add up to 100%)
   */
  macroDistribution?: {
    /**
     * Protein percentage of total calories
     */
    protein?: number | null;
    /**
     * Carbohydrates percentage of total calories
     */
    carbs?: number | null;
    /**
     * Fat percentage of total calories
     */
    fat?: number | null;
  };
  dietaryPreferences?:
    | ('vegetarian' | 'vegan' | 'glutenFree' | 'dairyFree' | 'keto' | 'paleo' | 'lowCarb' | 'highProtein')[]
    | null;
  days: {
    /**
     * Day number in the meal plan
     */
    dayNumber: number;
    meals: {
      mealType: 'breakfast' | 'lunch' | 'dinner' | 'snack' | 'preWorkout' | 'postWorkout';
      recipe: string | Recipe;
      /**
       * Number of servings (can be fractional)
       */
      servingSize: number;
      notes?: string | null;
      id?: string | null;
    }[];
    /**
     * Notes for this specific day
     */
    notes?: string | null;
    id?: string | null;
  }[];
  /**
   * Optional shopping list for the meal plan
   */
  shoppingList?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * General notes for the meal plan
   */
  notes?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  createdBy?: (string | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "userProfiles".
 */
export interface UserProfile {
  id: string;
  user: string | User;
  personalInfo?: {
    firstName?: string | null;
    lastName?: string | null;
    dateOfBirth?: string | null;
    gender?: ('male' | 'female' | 'nonBinary' | 'preferNotToSay') | null;
  };
  fitnessGoal:
    | 'loseWeight'
    | 'buildMuscle'
    | 'improveFitness'
    | 'maintainWeight'
    | 'increaseStrength'
    | 'improveFlexibility';
  activityLevel: 'sedentary' | 'lightlyActive' | 'moderatelyActive' | 'veryActive' | 'extraActive';
  bodyMeasurements?: {
    /**
     * Height in centimeters
     */
    height?: number | null;
    /**
     * Weight in kilograms
     */
    weight?: number | null;
    bodyFatPercentage?: number | null;
    measurementHistory?:
      | {
          date: string;
          /**
           * Weight in kilograms
           */
          weight?: number | null;
          bodyFatPercentage?: number | null;
          notes?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  dietaryPreferences?:
    | ('vegetarian' | 'vegan' | 'glutenFree' | 'dairyFree' | 'keto' | 'paleo' | 'lowCarb' | 'highProtein')[]
    | null;
  allergies?:
    | {
        allergen: string;
        severity?: ('mild' | 'moderate' | 'severe') | null;
        id?: string | null;
      }[]
    | null;
  workoutPreferences?: {
    preferredWorkoutDays?:
      | ('monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday')[]
      | null;
    preferredWorkoutTime?: ('morning' | 'afternoon' | 'evening') | null;
    workoutDuration?: ('lessThan30' | '30to45' | '45to60' | '60to90' | 'moreThan90') | null;
    preferredExerciseTypes?:
      | ('strengthTraining' | 'cardio' | 'hiit' | 'yoga' | 'pilates' | 'calisthenics' | 'crossfit')[]
      | null;
  };
  favoriteWorkouts?: (string | Workout)[] | null;
  favoriteRecipes?: (string | Recipe)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'exercises';
        value: string | Exercise;
      } | null)
    | ({
        relationTo: 'workouts';
        value: string | Workout;
      } | null)
    | ({
        relationTo: 'recipes';
        value: string | Recipe;
      } | null)
    | ({
        relationTo: 'mealPlans';
        value: string | MealPlan;
      } | null)
    | ({
        relationTo: 'userProfiles';
        value: string | UserProfile;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  authJSId?: T;
  roles?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exercises_select".
 */
export interface ExercisesSelect<T extends boolean = true> {
  name?: T;
  sets?:
    | T
    | {
        reps?: T;
        weight?: T;
        id?: T;
      };
  description?: T;
  instructions?: T;
  muscleGroups?: T;
  difficulty?: T;
  equipment?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workouts_select".
 */
export interface WorkoutsSelect<T extends boolean = true> {
  name?: T;
  date?: T;
  exercises?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes_select".
 */
export interface RecipesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  category?: T;
  dietaryPreferences?: T;
  prepTime?: T;
  cookTime?: T;
  servings?: T;
  ingredients?:
    | T
    | {
        ingredient?: T;
        quantity?: T;
        unit?: T;
        id?: T;
      };
  instructions?:
    | T
    | {
        step?: T;
        id?: T;
      };
  nutritionalInfo?:
    | T
    | {
        calories?: T;
        protein?: T;
        carbs?: T;
        fat?: T;
        fiber?: T;
        sugar?: T;
      };
  images?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  tips?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mealPlans_select".
 */
export interface MealPlansSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  goal?: T;
  duration?: T;
  dailyCalories?: T;
  macroDistribution?:
    | T
    | {
        protein?: T;
        carbs?: T;
        fat?: T;
      };
  dietaryPreferences?: T;
  days?:
    | T
    | {
        dayNumber?: T;
        meals?:
          | T
          | {
              mealType?: T;
              recipe?: T;
              servingSize?: T;
              notes?: T;
              id?: T;
            };
        notes?: T;
        id?: T;
      };
  shoppingList?: T;
  notes?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "userProfiles_select".
 */
export interface UserProfilesSelect<T extends boolean = true> {
  user?: T;
  personalInfo?:
    | T
    | {
        firstName?: T;
        lastName?: T;
        dateOfBirth?: T;
        gender?: T;
      };
  fitnessGoal?: T;
  activityLevel?: T;
  bodyMeasurements?:
    | T
    | {
        height?: T;
        weight?: T;
        bodyFatPercentage?: T;
        measurementHistory?:
          | T
          | {
              date?: T;
              weight?: T;
              bodyFatPercentage?: T;
              notes?: T;
              id?: T;
            };
      };
  dietaryPreferences?: T;
  allergies?:
    | T
    | {
        allergen?: T;
        severity?: T;
        id?: T;
      };
  workoutPreferences?:
    | T
    | {
        preferredWorkoutDays?: T;
        preferredWorkoutTime?: T;
        workoutDuration?: T;
        preferredExerciseTypes?: T;
      };
  favoriteWorkouts?: T;
  favoriteRecipes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}